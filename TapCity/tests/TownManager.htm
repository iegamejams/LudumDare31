<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="../js/Unit.js"></script>
    <script src="../js/UnitList.js"></script>
    <script src="../js/UnitManager.js"></script>
    <script src="../js/TownManager.js"></script>
    <script>
        "use strict";

        var testFailures = [];

        function testCondition(value, expected, message) {
            if (value !== expected) {
                testFailures.push(message + ": Actual " + value + " !== Expected " + expected);
            }
        }

        function RunTestManualBuild(townManager)
        {
            townManager.currentBuildPoints = 0;
            townManager.manualBuild();
            testCondition(townManager.currentBuildPoints, townManager.manualBPperCkick, "RunTestManualBuild:BasicTest: Build Points should increase by The Manual Point Count.");

            townManager.currentBuildPoints = 0;
            townManager.manualBuildTechLevelChange(3);
            townManager.manualBuild();
            testCondition(townManager.currentBuildPoints, townManager.manualBPperCkick, "RunTestManualBuild:AdvLevelTest: Build Points should increase by The Manual Point Count.");
        }

        function RunTestCheckLevelUp(townManager)
        {
            townManager.level = 1;
            townManager.currentBuildPoints = 0;
            townManager.buildPointsToNextLevel = 125;
            townManager.unitManager.maxUnits = 100;

            townManager.checkLevelUp();

            testCondition(townManager.currentBuildPoints, 0, "RunTestCheckLevelUp:Start: Build Points do not change if there is no levelup.");
            testCondition(townManager.level, 1, "RunTestCheckLevelUp:Start: Level does not change if there is not enough Build Points.");
            testCondition(townManager.buildPointsToNextLevel, 125, "RunTestCheckLevelUp:Start: Build Points for the next level does not change if there is insufficient points");
            testCondition(townManager.unitManager.maxUnits, 100, "RunTestCheckLevelUp:Start: Max Units does not change if there is insufficient points");

            townManager.level = 1;
            townManager.currentBuildPoints = 124;
            townManager.buildPointsToNextLevel = 125;
            townManager.unitManager.maxUnits = 100;

            townManager.checkLevelUp();

            testCondition(townManager.currentBuildPoints, 124, "RunTestCheckLevelUp:N-1: Build Points do not change if there is no levelup.");
            testCondition(townManager.level, 1, "RunTestCheckLevelUp:N-1: Level does not change if there is not enough Build Points.");
            testCondition(townManager.buildPointsToNextLevel, 125, "RunTestCheckLevelUp:N-1: Build Points for the next level does not change if there is insufficient points");
            testCondition(townManager.unitManager.maxUnits, 100, "RunTestCheckLevelUp:N-1: Max Units does not change if there is insufficient points");

            townManager.level = 1;
            townManager.currentBuildPoints = 125;
            townManager.buildPointsToNextLevel = 125;
            townManager.unitManager.maxUnits = 100;

            townManager.checkLevelUp();

            testCondition(townManager.currentBuildPoints, 0, "RunTestCheckLevelUp:EqualsTest: Build Points do change if there is a level up.");
            testCondition(townManager.level, 2, "RunTestCheckLevelUp:EqualsTest: Level should change if there is enough Build Points.");
            testCondition(townManager.buildPointsToNextLevel, 343, "RunTestCheckLevelUp:EqualsTest: Build Points for the next level changes if there is sufficient points");
            testCondition(townManager.unitManager.maxUnits, 144, "RunTestCheckLevelUp:EqualsTest: Max Units changes if there is sufficient points");

            townManager.level = 2;
            townManager.currentBuildPoints = 344;
            townManager.buildPointsToNextLevel = 343;
            townManager.unitManager.maxUnits = 144;

            townManager.checkLevelUp();

            testCondition(townManager.currentBuildPoints, 1, "RunTestCheckLevelUp:+1Test: Build Points do change if there is a level up.");
            testCondition(townManager.level, 3, "RunTestCheckLevelUp:+1Test: Level should change if there is enough Build Points.");
            testCondition(townManager.buildPointsToNextLevel, 729, "RunTestCheckLevelUp:+1Test: Build Points for the next level changes if there is sufficient points");
            testCondition(townManager.unitManager.maxUnits, 196, "RunTestCheckLevelUp:+1Test: Max Units changes if there is sufficient points");
        }

        function RunTestManualBuildTechLevelChange(townManager)
        {
            townManager.manualBuildTechLevelChange(1);

            testCondition(townManager.manualBuildTechLevel, 1, "RunTestManualBuildTechLevelChange:BasicTest: The Tech Level should be set Correctly.");
            testCondition(townManager.manualBPperCkick, 1, "RunTestManualBuildTechLevelChange:BasicTest: The Manual Build Point Per Click should be set Correctly.");

            townManager.manualBuildTechLevelChange(2);

            testCondition(townManager.manualBuildTechLevel, 2, "RunTestManualBuildTechLevelChange:Level2Test: The Tech Level should be set Correctly.");
            testCondition(townManager.manualBPperCkick, 4, "RunTestManualBuildTechLevelChange:Level2Test: The Manual Build Point Per Click should be set Correctly.");

            townManager.manualBuildTechLevelChange(3);

            testCondition(townManager.manualBuildTechLevel, 3, "RunTestManualBuildTechLevelChange:Level3Test: The Tech Level should be set Correctly.");
            testCondition(townManager.manualBPperCkick, 16, "RunTestManualBuildTechLevelChange:Level3Test: The Manual Build Point Per Click should be set Correctly.");
        }

        function RunTestManualFoodTechLevelChange(townManager) {
            townManager.manualFoodTechLevelChange(1);

            testCondition(townManager.manualFoodTechLevel, 1, "RunTestManualFoodTechLevelChange:BasicTest: The Tech Level should be set Correctly.");
            testCondition(townManager.manualFoodperCkick, 1, "RunTestManualFoodTechLevelChange:BasicTest: The Manual Food Per Click should be set Correctly.");

            townManager.manualFoodTechLevelChange(2);

            testCondition(townManager.manualFoodTechLevel, 2, "RunTestManualFoodTechLevelChange:Level2Test: The Tech Level should be set Correctly.");
            testCondition(townManager.manualFoodperCkick, 3, "RunTestManualFoodTechLevelChange:Level2Test: The Manual Food Per Click should be set Correctly.");

            townManager.manualFoodTechLevelChange(3);

            testCondition(townManager.manualFoodTechLevel, 3, "RunTestManualFoodTechLevelChange:Level3Test: The Tech Level should be set Correctly.");
            testCondition(townManager.manualFoodperCkick, 9, "RunTestManualFoodTechLevelChange:Level3Test: The Manual Food Per Click should be set Correctly.");
        }

        function RunTestManualOreTechLevelChange(townManager) {
            townManager.manualOreTechLevelChange(1);

            testCondition(townManager.manualOreTechLevel, 1, "RunTestManualOreTechLevelChange:BasicTest: The Tech Level should be set Correctly.");
            testCondition(townManager.manualOreperCkick, 1, "RunTestManualOreTechLevelChange:BasicTest: The Manual Ore Per Click should be set Correctly.");

            townManager.manualOreTechLevelChange(2);

            testCondition(townManager.manualOreTechLevel, 2, "RunTestManualOreTechLevelChange:Level2Test: The Tech Level should be set Correctly.");
            testCondition(townManager.manualOreperCkick, 2, "RunTestManualOreTechLevelChange:Level2Test: The Manual Ore Per Click should be set Correctly.");

            townManager.manualOreTechLevelChange(3);

            testCondition(townManager.manualOreTechLevel, 3, "RunTestManualOreTechLevelChange:Level3Test: The Tech Level should be set Correctly.");
            testCondition(townManager.manualOreperCkick, 4, "RunTestManualOreTechLevelChange:Level3Test: The Manual Ore Per Click should be set Correctly.");
        }

        function runTests(callback) {
            try {
                var townManager = new TownManager();
                RunTestCheckLevelUp(townManager);
                RunTestManualBuild(townManager);
                RunTestManualBuildTechLevelChange(townManager);
                RunTestManualFoodTechLevelChange(townManager);
                RunTestManualOreTechLevelChange(townManager);
            }
            catch (err) {
                document.testFailures = "Exception Caught: " + err.message;
                document.testPassed = false;
                return callback;
            }

            if (testFailures.length === 0) {
                document.testPassed = true;
            }

            return callback;
        }
    </script>
</head>
<body>

</body>
</html>
